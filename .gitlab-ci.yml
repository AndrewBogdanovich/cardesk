# Тут опишем правила запуска пайплайна: автоматическая сборка ветки master,
# веток release/* (например, release/2.1.0), merge request-ов и пушей
# в существующие merge request.
workflow:
  rules:
    # Правило: если ветка, в которой произошел коммит, называется master
    # или release*, то запускаем пайплайн всегда, дальше условия не смотрятся
    - if: '$CI_COMMIT_BRANCH =~ /release*/ || $CI_COMMIT_BRANCH == "master"'
      when: always
    # Правило: если произошел пуш, то ничего не запускаем
    # (если мы на прошлом шаге решили запускать, то это условие уже не важно)
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    # Если пред условия неактуальны, то любой другой триггер запустит сборку.
    # Например, если сделали merge request - будет запущен pipeline.
    - when: always

stages: # определяем 2 стейджа - build и deploy
  - build
  - deploy

assembleDevDebug: # описываем джобу для дебаг сборки с dev флейвором
  # Будем использовать образ из моего аккаунта на docker hub - в этот образ
  # вшиты android-sdk для 29 версии и нужные тулзы
  image: lenant255/android:latest
  stage: build # эта джоба выполнится на build stage
  script:
    # Cобственно команда тестирования и сборки.
    # Напишите нужную вам, подставьте верный flavor.
    - ./gradlew testDevDebug assembleDevDebug
  artifacts:
    paths:
      # Путь внутри docker контейнера, куда попадут apk файлы
      - app/build/outputs/

# Описываем джобу для release сборки с prod флейвором - тут все то же самое,
# но есть дополнительные шаги для подписания
assembleProdRelease:
  image: lenant255/android:latest
  stage: build
  script:
    - echo $KEYSTORE_FILE | base64 -d > my.keystore
    # Для подписания передадим некоторые параметры в gradlew, они
    # определяются в интферейсе gitlab ci, о них позже
    - ./gradlew testProdRelease assembleProdRelease
      -Pandroid.injected.signing.store.file=$(pwd)/my.keystore
      -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD
      -Pandroid.injected.signing.key.alias=$KEY_ALIAS
      -Pandroid.injected.signing.key.password=$KEY_PASSWORD
  artifacts:
    paths:
      - app/build/outputs/

deployDev: # джоба для деплоя дев сборки
  # Нам нужен npm для установки firebase-tools, так что используем образ с node
  image: node:latest
  stage: deploy
  # Опишем, что с предыдущего стейджа нам нужно только чтобы завершилась
  # джоба assembleDevDebug. Это позволит не дожидаться завершения
  # assembleProdRelease, кроме того у нас в этой джобе будут только
  # артефакты из assembleDevDebug
  needs: [assembleDevDebug]
  script:
    # Установим firebase-tools
    - npm install -g firebase-tools
    # Найдем апк файл и запишем в переменную apkfile
    - apkfile=$(find . -name "*.apk")
    # Выполним команду, которая отправит нашу сборку в firebase
    - firebase appdistribution:distribute $apkfile --app $FIREBASE_APP_DEV_ID
      --release-notes "$CI_COMMIT_MESSAGE" # в качестве release-notes будем использовать сообщение из коммита
      --groups "your-app-testers" # укажите группу тестировщиков, которые получат сборку, о настройке группы ниже
      --token "$FIREBASE_TOKEN"

# Джоба для деплоя прод сборки, тут все как в предыдущей джобе,
# только другой id приложения и другая джоба указана в needs
deployProd:
  image: node:latest
  stage: deploy
  needs: [assembleProdRelease]
  script:
    - npm install -g firebase-tools
    - apkfile=$(find . -name "*.apk")
    - firebase appdistribution:distribute $apkfile --app $FIREBASE_APP_PROD_ID
      --release-notes "$CI_COMMIT_MESSAGE"
      --groups "your-app-testers"
      --token "$FIREBASE_TOKEN"